# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shroomly-web
# app and org for use with dashboard.serverless.com
# app: shroomly
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'us-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}

    USER_POOL_ID: !Ref "ShroomlyCognitoUserPool"
    USER_POOL_CLIENT_ID: !Ref ShroomlyCognitoUserPoolClient

    APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

plugins:
  - serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-s3-deploy
  - serverless-dynamodb-local
  - serverless-offline-local-authorizers-plugin

functions:
  AuthTest:
    handler: lambda.testAuth
    role: ShroomlyLambdaRole
    events:
      - http:
          path: /test
          method: ANY
          cors: true
          localAuthorizer:
            type: COGNITO_USER_POOLS
            name: "localAuthProxyFn"
            IdentitySource: "Authorization"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ShroomlyApiGatewayAuthorizer
  serve:
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: handler.serve
    events:
      - http:
          path: /
          method: any
          cors: true
      - http:
          path: /{any+}
          method: any
          cors: true

custom:
  usersTableName: "shroomly-users-${sls:stage}"
  deviceSensorTableName: "shroomly-device-sensors-${sls:stage}"

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8011
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

  distBucketUrl:
    us-east-1:
      # us-east-1 uses a different URL format than the other regions
      Fn::Join:
        - ""
        - - https://s3.amazonaws.com/
          - Ref: DistBucket
    default:
      # All other regions
      Fn::Join:
        - ""
        - - https://s3-
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: DistBucket

  scripts:
    hooks:
      # Build the client-side script before packaging backend code
      package:initialize: "npm run build:browser"
      deploy:finalize: "npx sls s3deploy --stage ${self:provider.stage}"

  webpack:
    webpackConfig: "webpack.server.config.js"

  assets:
    # Automatically copy distribution folder to S3 stopped working; do it manually (see `scripts.hooks.deploy:finalize`)
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: dist/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"

  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    httpPort: 3000
    lambdaPort: 3002

resources:
  Resources:
    ShroomlyPublishSensorData:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ShroomlyPublishSensorData
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: iot:Publish
              Resource:
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/shroomly/*/sensors
    ShroomlyDevicePolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ShroomlyDevicePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: iot:Publish
              Resource:
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/republish/things/\${iot:Connection.Thing.ThingName}/shadow/update
            - Effect: Allow
              Action: iot:Publish
              Resource:
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/delete
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/get
            - Effect: Allow
              Action: iot:Receive
              Resource:
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/accepted
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/delta
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/get/accepted
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topic/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/rejected
            - Effect: Allow
              Action: iot:Subscribe
              Resource:
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topicfilter/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/accepted
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topicfilter/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/delta
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topicfilter/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/get/accepted
                - Fn::Join:
                    - ":"
                    - - "arn:aws:iot"
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - topicfilter/$aws/things/\${iot:Connection.Thing.ThingName}/shadow/update/rejected
            - Effect: Allow
              Action: iot:Connect
              Resource: arn:aws:iot:us-west-1:117565975709:client/\${iot:Connection.Thing.ThingName}

    # Cognito Auth User Pool
    ShroomlyCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - "email"
        UserPoolName: ShroomlyUserPool
        UsernameConfiguration:
          CaseSensitive: false

    # Cognito Web Application Client
    ShroomlyCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ShroomlyWebApp
        GenerateSecret: false
        UserPoolId:
          Ref: "ShroomlyCognitoUserPool"

    # Customize the API Gateway resource
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        # Enable gzip compression
        MinimumCompressionSize: 1000

    ShroomlyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: Shroomly
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ShroomlyCognitoUserPool, Arn]
        IdentitySource: method.request.header.Authorization

    # Lambda Execution Role
    ShroomlyLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ShroomlyLambda
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBReadAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - "log-group:/aws/lambda/*:*:*"

    # DynamoDB for Sensor Readings
    SensorReadingsDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.deviceSensorTableName}
        AttributeDefinitions:
          - AttributeName: device_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: device_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: "RANGE"
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # IoT MQTT to Dynamodb Rule Role
    SensorMQTTPublishRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - iot.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: WriteToSensorDynamoDB
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "dynamodb:PutItem"
                  Resource: !GetAtt SensorReadingsDynamoDB.Arn

    # IoT MQTT to DynamoDB
    SensorMQTTPublishDynamoDB:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: SensorMQTTPublishDynamoDB
        TopicRulePayload:
          RuleDisabled: false
          Sql: SELECT device_id, time as timestamp, uptime, wifi_rssi, env.co2 as env_co2, env.hum as env_hum, env.temp as env_temp_f FROM 'shroomly/+/sensors'
          Actions:
            - DynamoDBv2:
                PutItem:
                  TableName: ${self:custom.deviceSensorTableName}
                RoleArn: !GetAtt SensorMQTTPublishRole.Arn

    # LWT MQTT republish
    RepublishLWTMessages:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: RepublishLWTMessages
        TopicRulePayload:
          RuleDisabled: false
          Sql: SELECT * FROM 'republish/things/+/shadow/update'
          Actions:
            - Republish:
                Topic: $$aws/things/\${topic(3)}/shadow/update
                RoleArn: !GetAtt RepublishLWTMessagesRole.Arn

    RepublishLWTMessagesRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - iot.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: RepublishUpdateMessagesToAwsProtected
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: "iot:Publish"
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:iot"
                          - Ref: AWS::Region
                          - Ref: AWS::AccountId
                          - "topic/$aws/things/*/shadow/update"

    # S3 Bucket for the distribution bundles
    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://
                      - Ref: ApiGatewayRestApi
                      - .execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
              MaxAge: 3000
  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    UserPoolId:
      Value:
        Ref: ShroomlyCognitoUserPool
      Export:
        Name: ${self:provider.stage}-UserPoolId
    UserPoolClientId:
      Value:
        Ref: ShroomlyCognitoUserPoolClient
      Export:
        Name: ${self:provider.stage}-UserPoolClientId
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket

#include <WebServer.h>
#include <WiFi.h>

// ArduCAM demo (C)2017 Lee
// Web: http://www.ArduCAM.com
// This program is a demo of how to capture image in RAW format
// 1. Capture and buffer the image to FIFO every 5 seconds
// 2. Store the image to Micro SD/TF card with RAW format.
// 3. You can change the resolution by change the "resolution = OV5642_640x480"
// This program requires the ArduCAM V4.0.0 (or above) library and ArduCAM shield V2
// and use Arduino IDE 1.6.8 compiler or above
#include <Wire.h>
#include <ArduCAM.h>
#include <SPI.h>

const char *ssid = "The zone will be one of danger";
const char *pass = "because thats how you get ants";
WebServer server(80);

// This demo can only work on OV5640_MINI_5MP_PLUS or OV5642_MINI_5MP_PLUS platform.
#if !(defined(OV5642_MINI_5MP_PLUS))
#error Please select the hardware platform and camera module in the ../libraries/ArduCAM/memorysaver.h file
#endif
#define FRAMES_NUM 0x00
// set pin 7 as the slave select for the digital pot:
const int CS = 27;
// #define SD_CS 9
bool is_header = false;
int total_time = 0;
uint8_t resolution = OV2640_800x600;
uint32_t line, column;
ArduCAM myCAM(OV5642, CS);
uint8_t saveRAW(void);

void sendImageData(void)
{
  int i = 0;
  uint8_t temp = 0, temp_last = 0;
  uint32_t length = 0;
  bool is_header = false;

  WiFiClient client = server.client();
  if (!client.connected())
    return;

  byte buf[256];
  length = myCAM.read_fifo_length();
  Serial.print(F("The fifo length is :"));
  Serial.println(length, DEC);

  if (length >= MAX_FIFO_SIZE) // 8M
  {
    Serial.println("Over size.");
    return;
  }
  if (length == 0) // 0 kb
  {
    Serial.println(F("Size is 0."));
    return;
  }
  myCAM.CS_LOW();
  myCAM.set_fifo_burst();
  while (length--)
  {
    temp_last = temp;
    temp = SPI.transfer(0x00);
    // Read JPEG data from FIFO
    if ((temp == 0xD9) && (temp_last == 0xFF)) // If find the end ,break while,
    {
      buf[i++] = temp; // save the last  0XD9
      // Write the remain bytes in the buffer
      myCAM.CS_HIGH();
      client.write(buf, i);
      Serial.println(F("Image save OK."));
      is_header = false;
      i = 0;
    }
    if (is_header == true)
    {
      // Write image data to buffer if not full
      if (i < 256)
        buf[i++] = temp;
      else
      {
        // Write 256 bytes image data to file
        myCAM.CS_HIGH();
        client.write(buf, 256);
        i = 0;
        buf[i++] = temp;
        myCAM.CS_LOW();
        myCAM.set_fifo_burst();
      }
    }
    else if ((temp == 0xD8) & (temp_last == 0xFF))
    {
      is_header = true;
      buf[i++] = temp_last;
      buf[i++] = temp;
      Serial.println("Found header at: " + String(length));
    }
  }
  Serial.println("Image Sent OK");
  myCAM.flush_fifo();
}

void caputureImage(void)
{
  Serial.println(F("start capture."));
  myCAM.start_capture();
  auto total_time = millis();
  while (!myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK))
    ;
  total_time = millis() - total_time;
  Serial.println(F("CAM Capture Done."));
  Serial.print(F("capture total_time used (in miliseconds):"));
  Serial.println(total_time, DEC);
}

void captureCallbackFunction(void)
{
  caputureImage();
  WiFiClient client = server.client();
  if (!client.connected())
    return;
  String response = "HTTP/1.1 200 OK\r\n";
  response += "Content-Type: image/jpeg\r\n";
  response += "Content-len: " + String(myCAM.read_fifo_length()) + "\r\n\r\n";
  client.write(response.c_str());
  sendImageData();
}

void sayHello()
{
  WiFiClient client = server.client();
  if (!client.connected())
    return;
  String response = "<!DOCTYPE HTML><html>Hello from ESP32!</html>\r\n";
  server.send(200, "text/html", response);
}

void setup()
{
  // put your setup code here, to run once:
  uint8_t vid, pid;
  uint8_t temp;

#if defined(__SAM3X8E__)
  Wire1.begin();
#else
  Wire.begin();
#endif
  Serial.begin(115200);
  Serial.println(F("ArduCAM Start!"));
  // set the CS as an output:
  pinMode(CS, OUTPUT);
  digitalWrite(CS, HIGH);
  // initialize SPI:
  SPI.begin();

  pinMode(12, OUTPUT);
  digitalWrite(12, HIGH);

  // Reset the CPLD
  myCAM.write_reg(0x07, 0x80);
  delay(100);
  myCAM.write_reg(0x07, 0x00);
  delay(100);

  while (1)
  {
    // Check if the ArduCAM SPI bus is OK
    myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
    temp = myCAM.read_reg(ARDUCHIP_TEST1);
    if (temp != 0x55)
    {
      Serial.println(F("SPI interface Error!"));
      Serial.println(temp);
      delay(1000);
      continue;
    }
    else
    {
      Serial.println(F("SPI interface OK."));
      break;
    }
  }

  while (1)
  {
    // Check if the camera module type is OV5642
    myCAM.rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
    myCAM.rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
    if ((vid != 0x56) || (pid != 0x42))
    {
      Serial.println(F("Can't find OV5642 module!"));
      delay(1000);
      continue;
    }
    else
    {
      Serial.println(F("OV5642 detected."));
      break;
    }
  }
  // Initialize SD Card
  Serial.println("Skipping SD Card setup");
  // Change to JPEG capture mode and initialize the OV5640 module
  myCAM.set_format(JPEG);
  myCAM.InitCAM();
  myCAM.set_bit(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
  myCAM.OV5642_set_JPEG_size(OV5642_1600x1200);

  myCAM.flush_fifo();
  myCAM.clear_fifo_flag();

  WiFi.mode(WIFI_STA);
  auto status = WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
  }
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  server.enableCORS();
  server.on("/", HTTP_GET, sayHello);
  server.on("/capture", HTTP_GET, captureCallbackFunction);
  server.begin();
}

void loop()
{
  server.handleClient();
  // //  File outFile;
  // char VL;
  // char str[8];
  // byte buf[256];
  // static int k = 0, m = 0;
  // int i, j = 0;
  // // put your main code here, to run repeatedly:
  // myCAM.flush_fifo();
  // myCAM.clear_fifo_flag();
  // myCAM.OV5642_set_RAW_size(resolution);
  // delay(1000);
  // //Start capture
  // Serial.println(F("start capture."));
  // myCAM.start_capture();
  // total_time = millis();
  // while (!myCAM.get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK))
  //   ;
  // total_time = millis() - total_time;
  // Serial.println(F("CAM Capture Done."));
  // Serial.print(F("capture total_time used (in miliseconds):"));
  // Serial.println(total_time, DEC);
  // Serial.println("Saving the image,please waitting...");
  // Serial.println(" Skipping Saving...");
  // // total_time = millis();
  // //      k = k + 1;
  // //     itoa(k, str, 10);
  // //     strcat(str,".raw");        //Generate file name
  // //     outFile = SD.open(str,O_WRITE | O_CREAT | O_TRUNC);
  // //     if (! outFile)
  // //     {
  // //       Serial.println(F("File open error"));
  // //       return;
  // //     }
  // //     if(resolution == OV5642_640x480 ){
  // //       line = 640;column = 480;
  // //       }else if( resolution == OV5642_1280x960 ){
  // //         line = 1280;column = 960;
  // //         }else if( resolution == OV5642_1920x1080 ){
  // //            line = 1920;column = 1080;
  // //           }else if( resolution == OV5642_2592x1944 ){
  // //             line = 2592;column = 1944;
  // //             }
  // //     //Save as RAW format
  // //     for(i = 0; i < line; i++)
  // //     for(j = 0; j < column; j++)
  // //     {
  // //       VL = myCAM.read_fifo();
  // //       buf[m++] = VL;
  // //       if(m >= 256)
  // //       {
  // //         //Write 256 bytes image data to file from buffer
  // //         outFile.write(buf,256);
  // //         m = 0;
  // //       }
  // //     }
  // //     if(m > 0 )//Write the left image data to file from buffer
  // //       outFile.write( buf, m );m = 0;
  // //     //Close the file
  // //     outFile.close();
  // //     Serial.println("Image save OK.");
  // //Clear the capture done flag
  // myCAM.clear_fifo_flag();
  // delay(5000);
}
